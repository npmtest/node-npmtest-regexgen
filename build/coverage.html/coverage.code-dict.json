{"/home/travis/build/npmtest/node-npmtest-regexgen/test.js":"/* istanbul instrument in package npmtest_regexgen */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-regexgen/lib.npmtest_regexgen.js":"/* istanbul instrument in package npmtest_regexgen */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_regexgen = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_regexgen = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-regexgen/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-regexgen && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_regexgen */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_regexgen\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_regexgen.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_regexgen.rollup.js'] =\n            local.assetsDict['/assets.npmtest_regexgen.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_regexgen.__dirname + '/lib.npmtest_regexgen.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-regexgen/node_modules/regexgen/index.js":"const Trie = require('./src/trie');\n\n/**\n * Generates a regular expression that matches the given input strings.\n * @param {Array<string>} inputs\n * @param {string} flags\n * @return {RegExp}\n */\nfunction regexgen(inputs, flags) {\n  let trie = new Trie;\n  trie.addAll(inputs);\n  return trie.toRegExp(flags);\n}\n\nregexgen.Trie = Trie;\nmodule.exports = regexgen;\n","/home/travis/build/npmtest/node-npmtest-regexgen/node_modules/regexgen/src/trie.js":"const State = require('./state');\nconst minimize = require('./minimize');\nconst toRegex = require('./regex');\n\n/**\n * A Trie represents a set of strings in a tree data structure\n * where each edge represents a single character.\n * https://en.wikipedia.org/wiki/Trie\n */\nclass Trie {\n  constructor() {\n    this.alphabet = new Set;\n    this.root = new State;\n  }\n\n  /**\n   * Adds the given string to the trie.\n   * @param {string} string - the string to add\n   */\n  add(string) {\n    let node = this.root;\n    for (let char of string) {\n      this.alphabet.add(char);\n      node = node.transitions.get(char);\n    }\n\n    node.accepting = true;\n  }\n\n  /**\n   * Adds the given array of strings to the trie.\n   * @param {Array<string>} strings - the array of strings to add\n   */\n  addAll(strings) {\n    for (let string of strings) {\n      this.add(string);\n    }\n  }\n\n  /**\n   * Returns a minimal DFA representing the strings in the trie.\n   * @return {State} - the starting state of the minimal DFA\n   */\n  minimize() {\n    return minimize(this.root);\n  }\n\n  /**\n   * Returns a regex pattern that matches the strings in the trie.\n   * @return {string} pattern - The regex pattern.\n   */\n  toString() {\n    return toRegex(this.minimize());\n  }\n\n  /**\n   * Returns a regex that matches the strings in the trie.\n   * @param {string} flags - The flags to add to the regex.\n   * @return {RegExp}\n   */\n  toRegExp(flags) {\n    return new RegExp(this.toString(), flags);\n  }\n}\n\nmodule.exports = Trie;\n","/home/travis/build/npmtest/node-npmtest-regexgen/node_modules/regexgen/src/state.js":"const Map = require('./map');\n\n/**\n * Represents a state in a DFA.\n */\nclass State {\n  constructor() {\n    this.accepting = false;\n    this.transitions = new Map(k => new State);\n  }\n\n  /**\n   * A generator that yields all states in the subtree\n   * starting with this state.\n   */\n  *visit(visited = new Set) {\n    if (visited.has(this)) return;\n    visited.add(this);\n\n    yield this;\n    for (let state of this.transitions.values()) {\n      yield* state.visit(visited);\n    }\n  }\n}\n\nmodule.exports = State;\n","/home/travis/build/npmtest/node-npmtest-regexgen/node_modules/regexgen/src/map.js":"/**\n * This ES6 Map subclass calls the getter function passed to\n * the constructor to initialize undefined properties when they\n * are first retrieved.\n */\nclass DefaultMap extends Map {\n  constructor(iterable, defaultGetter) {\n    if (typeof iterable === 'function') {\n      defaultGetter = iterable;\n      iterable = null;\n    }\n\n    super(iterable);\n    this.defaultGetter = defaultGetter;\n  }\n\n  get(key) {\n    if (!super.has(key)) {\n      let res = this.defaultGetter(key);\n      this.set(key, res);\n      return res;\n    }\n\n    return super.get(key);\n  }\n}\n\nmodule.exports = DefaultMap;\n","/home/travis/build/npmtest/node-npmtest-regexgen/node_modules/regexgen/src/minimize.js":"const Map = require('./map');\nconst Set = require('./set');\nconst State = require('./state');\n\n/**\n * Implements Hopcroft's DFA minimization algorithm.\n * https://en.wikipedia.org/wiki/DFA_minimization#Hopcroft.27s_algorithm\n *\n * @param {State} root - the initial state of the DFA\n * @return {State} - the new initial state\n */\nfunction minimize(root) {\n  let states = new Set(root.visit());\n  let finalStates = states.filter(s => s.accepting);\n\n  // Create a map of incoming transitions to each state, grouped by character.\n  let transitions = new Map(k => new Map(k => new Set));\n  for (let s of states) {\n    for (let [t, st] of s.transitions) {\n      transitions.get(st).get(t).add(s);\n    }\n  }\n\n  let P = new Set([finalStates, states.difference(finalStates)]);\n  let W = new Set(P);\n\n  while (W.size > 0) {\n    let A = W.shift();\n\n    // Collect states that have transitions leading to states in A, grouped by character.\n    let t = new Map(k => new Set);\n    for (let s of A) {\n      for (let [T, X] of transitions.get(s)) {\n        t.get(T).addAll(X);\n      }\n    }\n\n    for (let X of t.values()) {\n      for (let Y of P) {\n        let i = X.intersection(Y);\n        if (i.size === 0) {\n          continue;\n        }\n\n        let d = Y.difference(X);\n        if (d.size === 0) {\n          continue;\n        }\n\n        P.replace(Y, i, d);\n\n        let y = W.find(v => v.equals(Y));\n        if (y) {\n          W.replace(y, i, d);\n        } else if (i.size <= d.size) {\n          W.add(i);\n        } else {\n          W.add(d);\n        }\n      }\n    }\n  }\n\n  // Each set S in P now represents a state in the minimized DFA.\n  // Build the new states and transitions.\n  let newStates = new Map(k => new State);\n  let initial = null;\n\n  for (let S of P) {\n    let first = S.first();\n    let s = newStates.get(S);\n    for (let [c, old] of first.transitions) {\n      s.transitions.set(c, newStates.get(P.find(v => v.has(old))));\n    }\n\n    s.accepting = first.accepting;\n\n    if (S.has(root)) {\n      initial = s;\n    }\n  }\n\n  return initial;\n}\n\nmodule.exports = minimize;\n","/home/travis/build/npmtest/node-npmtest-regexgen/node_modules/regexgen/src/set.js":"/**\n * This class extends the native ES6 Set class with some additional methods\n */\nclass ExtendedSet extends Set {\n  filter(fn) {\n    let res = new ExtendedSet;\n    for (let x of this) {\n      if (fn(x)) {\n        res.add(x);\n      }\n    }\n\n    return res;\n  }\n\n  difference(b) {\n    return this.filter(x => !b.has(x));\n  }\n\n  intersection(b) {\n    return this.filter(x => b.has(x));\n  }\n\n  equals(b) {\n    if (this.size !== b.size) {\n      return false;\n    }\n\n    for (let x of this) {\n      if (!b.has(x)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  find(fn) {\n    for (let x of this) {\n      if (fn(x)) {\n        return x;\n      }\n    }\n\n    return null;\n  }\n\n  first() {\n    return this.values().next().value;\n  }\n\n  shift() {\n    let v = this.first();\n    this.delete(v);\n    return v;\n  }\n\n  replace(search, ...replacements) {\n    if (this.delete(search)) {\n      this.addAll(replacements);\n    }\n  }\n\n  addAll(items) {\n    for (let x of items) {\n      this.add(x);\n    }\n  }\n}\n\nmodule.exports = ExtendedSet;\n","/home/travis/build/npmtest/node-npmtest-regexgen/node_modules/regexgen/src/regex.js":"const {Alternation, CharClass, Concatenation, Repetition, Literal} = require('./ast');\n\n/**\n * Implements Brzozowski's algebraic method to convert a DFA into a regular\n * expression pattern.\n * http://cs.stackexchange.com/questions/2016/how-to-convert-finite-automata-to-regular-expressions#2392\n *\n * @param {State} root - the initial state of the DFA\n * @return {String} - the converted regular expression pattern\n */\nfunction toRegex(root) {\n  let states = Array.from(root.visit());\n\n  // Setup the system of equations A and B from Arden's Lemma.\n  // A represents a state transition table for the given DFA.\n  // B is a vector of accepting states in the DFA, marked as epsilons.\n  let A = [];\n  let B = [];\n\n  for (let i = 0; i < states.length; i++) {\n    let a = states[i];\n    if (a.accepting) {\n      B[i] = new Literal('');\n    }\n\n    A[i] = [];\n    for (let [t, s] of a.transitions) {\n      let j = states.indexOf(s);\n      A[i][j] = A[i][j] ? union(A[i][j], new Literal(t)) : new Literal(t);\n    }\n  }\n\n  // Solve the of equations\n  for (let n = states.length - 1; n >= 0; n--) {\n    if (A[n][n] != null) {\n      B[n] = concat(star(A[n][n]), B[n]);\n      for (let j = 0; j < n; j++) {\n        A[n][j] = concat(star(A[n][n]), A[n][j]);\n      }\n    }\n\n    for (let i = 0; i < n; i++) {\n      if (A[i][n] != null) {\n        B[i] = union(B[i], concat(A[i][n], B[n]));\n        for (let j = 0; j < n; j++) {\n          A[i][j] = union(A[i][j], concat(A[i][n], A[n][j]));\n        }\n      }\n    }\n  }\n\n  return B[0].toString();\n}\n\n/**\n * Creates a repetition if `exp` exists.\n */\nfunction star(exp) {\n  return exp ? new Repetition(exp, '*') : null;\n}\n\n/**\n * Creates a union between two expressions\n */\nfunction union(a, b) {\n  if (a != null && b != null && a !== b) {\n    // Hoist common substrings at the start and end of the options\n    let start, end, res;\n    [a, b, start] = removeCommonSubstring(a, b, 'start');\n    [a, b, end] = removeCommonSubstring(a, b, 'end');\n\n    // If a or b is empty, make an optional group instead\n    if (a.isEmpty || b.isEmpty) {\n      res = new Repetition(a.isEmpty ? b : a, '?');\n    } else if (a instanceof Repetition && a.type === '?') {\n      res = new Repetition(new Alternation(a.expr, b), '?');\n    } else if (b instanceof Repetition && b.type === '?') {\n      res = new Repetition(new Alternation(a, b.expr), '?');\n    } else {\n      // Check if we can make a character class instead of an alternation\n      let ac = a.getCharClass && a.getCharClass();\n      let bc = b.getCharClass && b.getCharClass();\n      if (ac && bc) {\n        res = new CharClass(ac, bc);\n      } else {\n        res = new Alternation(a, b);\n      }\n    }\n\n    if (start) {\n      res = new Concatenation(new Literal(start), res);\n    }\n\n    if (end) {\n      res = new Concatenation(res, new Literal(end));\n    }\n\n    return res;\n  }\n\n  return a || b;\n}\n\n/**\n * Removes the common prefix or suffix from the two expressions\n */\nfunction removeCommonSubstring(a, b, side) {\n  let al = a.getLiteral && a.getLiteral(side);\n  let bl = b.getLiteral && b.getLiteral(side);\n  if (!al || !bl) {\n    return [a, b, null];\n  }\n\n  let s = commonSubstring(al, bl, side);\n  if (!s) {\n    return [a, b, ''];\n  }\n\n  a = a.removeSubstring(side, s.length);\n  b = b.removeSubstring(side, s.length);\n\n  return [a, b, s];\n}\n\n/**\n * Finds the common prefix or suffix between to strings\n */\nfunction commonSubstring(a, b, side) {\n  let dir = side === 'start' ? 1 : -1;\n  a = Array.from(a);\n  b = Array.from(b);\n  let ai = dir === 1 ? 0 : a.length - 1;\n  let ae = dir === 1 ? a.length : -1;\n  let bi = dir === 1 ? 0 : b.length - 1;\n  let be = dir === 1 ? b.length : -1;\n  let res = '';\n\n  for (; ai !== ae && bi !== be && a[ai] === b[bi]; ai += dir, bi += dir) {\n    if (dir === 1) {\n      res += a[ai];\n    } else {\n      res = a[ai] + res;\n    }\n  }\n\n  return res;\n}\n\n/**\n * Creates a concatenation between expressions a and b\n */\nfunction concat(a, b) {\n  if (a == null || b == null) {\n    return null;\n  }\n\n  if (a.isEmpty) {\n    return b;\n  }\n\n  if (b.isEmpty) {\n    return a;\n  }\n\n  // Combine literals\n  if (a instanceof Literal && b instanceof Literal) {\n    return new Literal(a.value + b.value);\n  }\n\n  if (a instanceof Literal && b instanceof Concatenation && b.a instanceof Literal) {\n    return new Concatenation(new Literal(a.value + b.a.value), b.b);\n  }\n\n  if (b instanceof Literal && a instanceof Concatenation && a.b instanceof Literal) {\n    return new Concatenation(a.a, new Literal(a.b.value + b.value));\n  }\n\n  return new Concatenation(a, b);\n}\n\nmodule.exports = toRegex;\n","/home/travis/build/npmtest/node-npmtest-regexgen/node_modules/regexgen/src/ast.js":"const jsesc = require('jsesc');\nconst regenerate = require('regenerate');\n\n/**\n * Represents an alternation (e.g. `foo|bar`)\n */\nclass Alternation {\n  constructor(...options) {\n    this.precedence = 1;\n    this.options = this.flatten(options);\n    this.options.sort((a, b) => b.length - a.length);\n  }\n\n  flatten(options) {\n    return options.reduce((res, option) => res.concat(\n      option instanceof Alternation ? this.flatten(option.options) : option\n    ), []);\n  }\n\n  toString() {\n    return this.options.map(o => parens(o, this)).join('|');\n  }\n}\n\n/**\n * Represents a character class (e.g. [0-9a-z])\n */\nclass CharClass {\n  constructor(a, b) {\n    this.precedence = 1;\n    this.set = regenerate(a, b);\n  }\n\n  get length() {\n    return 1;\n  }\n\n  toString() {\n    return this.set.toString();\n  }\n\n  getCharClass() {\n    return this.set;\n  }\n\n  get isSingleCharacter() {\n    return !this.set.toArray().some(c => c > 0xffff);\n  }\n}\n\n/**\n * Represents a concatenation (e.g. `foo`)\n */\nclass Concatenation {\n  constructor(a, b) {\n    this.precedence = 2;\n    this.a = a;\n    this.b = b;\n  }\n\n  get length() {\n    return this.a.length + this.b.length;\n  }\n\n  toString() {\n    return parens(this.a, this) + parens(this.b, this);\n  }\n\n  getLiteral(side) {\n    if (side === 'start' && this.a.getLiteral) {\n      return this.a.getLiteral(side);\n    }\n\n    if (side === 'end' && this.b.getLiteral) {\n      return this.b.getLiteral(side);\n    }\n  }\n\n  removeSubstring(side, len) {\n    let {a, b} = this;\n    if (side === 'start' && a.removeSubstring) {\n      a = a.removeSubstring(side, len);\n    }\n\n    if (side === 'end' && b.removeSubstring) {\n      b = b.removeSubstring(side, len);\n    }\n\n    return a.isEmpty ? b : b.isEmpty ? a : new Concatenation(a, b);\n  }\n}\n\n/**\n * Represents a repetition (e.g. `a*` or `a?`)\n */\nclass Repetition {\n  constructor(expr, type) {\n    this.precedence = 3;\n    this.expr = expr;\n    this.type = type;\n  }\n\n  get length() {\n    return this.expr.length;\n  }\n\n  toString() {\n    return parens(this.expr, this) + this.type;\n  }\n}\n\n/**\n * Represents a literal (e.g. a string)\n */\nclass Literal {\n  constructor(value) {\n    this.precedence = 2;\n    this.value = value;\n  }\n\n  get isEmpty() {\n    return !this.value;\n  }\n\n  get isSingleCharacter() {\n    return this.length === 1;\n  }\n\n  get length() {\n    return this.value.length;\n  }\n\n  toString() {\n    return jsesc(this.value).replace(/([\\t\\n\\f\\r\\$\\(\\)\\*\\+\\-\\.\\?\\[\\]\\^\\{\\|\\}])/g, '\\\\$1');\n  }\n\n  getCharClass() {\n    if (Array.from(this.value).length === 1) {\n      return this.value;\n    }\n  }\n\n  getLiteral() {\n    return this.value;\n  }\n\n  removeSubstring(side, len) {\n    if (side === 'start') {\n      return new Literal(this.value.slice(len));\n    }\n\n    if (side === 'end') {\n      return new Literal(this.value.slice(0, this.value.length - len));\n    }\n  }\n}\n\nfunction parens(exp, parent) {\n  let str = exp.toString();\n  if (exp.precedence < parent.precedence && !exp.isSingleCharacter) {\n    return '(?:' + str + ')';\n  }\n\n  return str;\n}\n\nexports.Alternation = Alternation;\nexports.CharClass = CharClass;\nexports.Concatenation = Concatenation;\nexports.Repetition = Repetition;\nexports.Literal = Literal;\n","/home/travis/build/npmtest/node-npmtest-regexgen/node_modules/regexgen/bin/cli.js":"#!/usr/bin/env node\n\nconst regexgen = require('../');\n\nlet args = process.argv.slice(2);\nlet flags = '';\nif (args.length && args[0][0] === '-') {\n  flags = args.shift().slice(1);\n}\n\nif (args.length === 0) {\n  console.log('Usage: regexgen [-gimuy] string1 string2 string3...');\n  process.exit(1);\n}\n\nconsole.log(regexgen(args, flags));\n"}